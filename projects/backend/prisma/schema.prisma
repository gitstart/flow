datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator pothos {
  provider = "prisma-pothos-types"
}

model Task {
  /// The id of the task.
  id                Int        @id @default(autoincrement())
  /// The date and time of creation of the task
  createdAt         DateTime   @default(now())
  /// The date and time the task was updated
  updatedAt         DateTime   @updatedAt
  /// The title of the task
  title             String
  /// The status of the task
  status            TaskStatus @default(TODO)
  /// The date the task is scheduled for
  date              DateTime   @default(now()) @db.Date
  /// Whether the task is private or not
  isPrivate         Boolean    @default(false)
  /// The length of time the task is expected to take.
  durationInMinutes Int?
  /// The dates of the tasks that were posponed to create this task.
  /// This is mostly for analytics purposes, hence why it's not a relation.
  previousDates     DateTime[] @db.Date

  /// The externalItem linked to the task
  externalItem   ExternalItem? @relation(fields: [externalItemId], references: [id])
  externalItemId String?

  /// The template that was used to create the task
  fromTemplate   TaskTemplate? @relation(fields: [fromTemplateId], references: [id])
  fromTemplateId Int?
}

// The description of each enum value is copied into src/graphql/Task.ts
/// The status of a task
enum TaskStatus {
  /// When the task is planned or in progress.
  TODO
  /// When the task is done.
  DONE
  /// When the task was decided not to be done anymore.
  CANCELED
  /// When the task was not completed on the scheduled date, but was decided to work on it a different day.
  /// A new task is created at the new date, instead of changing the date of this task.
  POSTPONED
}

/// Templates for repeating tasks.
model TaskTemplate {
  /// The id of the task template
  id                Int              @id @default(autoincrement())
  /// The date and time of creation of the task template
  createdAt         DateTime         @default(now())
  /// The date and time the task template was updated
  updatedAt         DateTime         @updatedAt
  /// The initial title when creating a task using the template.
  title             String
  /// Whether the task is private or not
  isPrivate         Boolean          @default(false)
  /// The initial durationInMinutes when creating a task using the template.
  durationInMinutes Int?
  /// The repeatance of the task template. Must have at least one value.
  repeats           TaskRepeatance[]
  /// The first day the task template takes effect.
  firstDay          DateTime         @default(now()) @db.Date
  /// The last day the task template takes effect.
  lastDay           DateTime?        @db.Date

  /// The externalItem linked to the template
  externalItem   ExternalItem? @relation(fields: [externalItemId], references: [id])
  externalItemId String?

  tasks Task[]
}

enum TaskRepeatance {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

/// An item that is used to create tasks from.
/// It can be a calendar event, a task from tools like Trello or Linear, etc.
model ExternalItem {
  /// The id of the external item
  id                String    @id
  /// The date and time of creation of the external item
  createdAt         DateTime  @default(now())
  /// The date and time the external item was updated
  updatedAt         DateTime  @updatedAt
  /// The title of the external item.
  /// It is used as the initial title when creating a task from the external item.
  title             String
  /// The source of the external item.
  /// This is equal to one of the keys in the config.externalSources object.
  source            String
  /// Whether the external item is relevant to the user and should be shown.
  isRelevant        Boolean   @default(true)
  /// The url to the external item.
  url               String?
  /// The date and time the external item is scheduled for.
  scheduledAt       DateTime?
  /// The length of time the external item is expected to take.
  durationInMinutes Int?

  tasks         Task[]
  taskTemplates TaskTemplate[]
}
