/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../../graphql/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ExternalItemWhereInput: { // input type
    isRelevant?: boolean | null; // Boolean
    isScheduled?: boolean | null; // Boolean
  }
  TaskTemplateWhereInput: { // input type
    repeats?: NexusGenEnums['TaskRepeatance'][] | null; // [TaskRepeatance!]
  }
}

export interface NexusGenEnums {
  TaskRepeatance: "EVERYDAY" | "FRIDAY" | "MONDAY" | "SATURDAY" | "SUNDAY" | "THURSDAY" | "TUESDAY" | "WEDNESDAY" | "WEEKDAY" | "WEEKEND"
  TaskStatus: "CANCELED" | "DONE" | "POSTPONED" | "TODO"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Bytes: any
  DateTime: any
  Decimal: any
  Json: any
}

export interface NexusGenObjects {
  ExternalItem: { // root type
    durationInMinutes?: number | null; // Int
    id: string; // ID!
    isRelevant: boolean; // Boolean!
    scheduledAt?: NexusGenScalars['DateTime'] | null; // DateTime
    source: string; // String!
    title: string; // String!
    url?: string | null; // String
  }
  Query: {};
  Task: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    durationInMinutes?: number | null; // Int
    id: number; // Int!
    previousTaskDates: NexusGenScalars['DateTime'][]; // [DateTime!]!
    status: NexusGenEnums['TaskStatus']; // TaskStatus!
    title: string; // String!
  }
  TaskTemplate: { // root type
    durationInMinutes?: number | null; // Int
    id: number; // Int!
    repeats: NexusGenEnums['TaskRepeatance'][]; // [TaskRepeatance!]!
    title: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  ExternalItem: { // field return type
    durationInMinutes: number | null; // Int
    iconUrl: string | null; // String
    id: string; // ID!
    isRelevant: boolean; // Boolean!
    scheduledAt: NexusGenScalars['DateTime'] | null; // DateTime
    source: string; // String!
    title: string; // String!
    url: string | null; // String
  }
  Query: { // field return type
    externalItems: NexusGenRootTypes['ExternalItem'][]; // [ExternalItem!]!
    repeatingTasks: NexusGenRootTypes['TaskTemplate'][]; // [TaskTemplate!]!
  }
  Task: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    date: NexusGenScalars['DateTime']; // DateTime!
    durationInMinutes: number | null; // Int
    externalItem: NexusGenRootTypes['ExternalItem'] | null; // ExternalItem
    id: number; // Int!
    previousTaskDates: NexusGenScalars['DateTime'][]; // [DateTime!]!
    repeats: boolean | null; // Boolean
    status: NexusGenEnums['TaskStatus']; // TaskStatus!
    taskTemplate: NexusGenRootTypes['TaskTemplate'] | null; // TaskTemplate
    title: string; // String!
  }
  TaskTemplate: { // field return type
    durationInMinutes: number | null; // Int
    id: number; // Int!
    repeats: NexusGenEnums['TaskRepeatance'][]; // [TaskRepeatance!]!
    title: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  ExternalItem: { // field return type name
    durationInMinutes: 'Int'
    iconUrl: 'String'
    id: 'ID'
    isRelevant: 'Boolean'
    scheduledAt: 'DateTime'
    source: 'String'
    title: 'String'
    url: 'String'
  }
  Query: { // field return type name
    externalItems: 'ExternalItem'
    repeatingTasks: 'TaskTemplate'
  }
  Task: { // field return type name
    createdAt: 'DateTime'
    date: 'DateTime'
    durationInMinutes: 'Int'
    externalItem: 'ExternalItem'
    id: 'Int'
    previousTaskDates: 'DateTime'
    repeats: 'Boolean'
    status: 'TaskStatus'
    taskTemplate: 'TaskTemplate'
    title: 'String'
  }
  TaskTemplate: { // field return type name
    durationInMinutes: 'Int'
    id: 'Int'
    repeats: 'TaskRepeatance'
    title: 'String'
  }
}

export interface NexusGenArgTypes {
  Query: {
    externalItems: { // args
      where?: NexusGenInputs['ExternalItemWhereInput'] | null; // ExternalItemWhereInput
    }
    repeatingTasks: { // args
      where?: NexusGenInputs['TaskTemplateWhereInput'] | null; // TaskTemplateWhereInput
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}